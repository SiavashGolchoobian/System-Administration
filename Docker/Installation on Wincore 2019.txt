----===================================================================(Only on Windows 10)
1-Configure Windows Features to enable the Containers feature:
	Get-WindowsOptionalFeature -Online -FeatureName containers
	
 ----===================================================================(Only on Windows Server 2016+)
1-Configure Windows Features to enable the Containers feature:
	Install-WindowsFeature -Name Containers
2-This will install the Docker-Microsoft PackageManagement Provider from the PowerShell Gallery:
	Install-Module -Name DockerMsftProvider -Repository PSGallery -Force
3-Install the latest version of Docker on Window Server 2019 that includes Docker Engine and the Docker client and It is required in order to work with Windows containers,(This may take long time to download and install this package, also you should use VPN or Proxy servers if you are connected from Iran):
	Install-Package -Name docker -ProviderName DockerMsftProvider
4-When the installation is complete, reboot the computer:
	Restart-Computer -Force
5-This sets up Docker as a Windows Service, which you need to start:
	ps>Start-Service docker
6-Check Docker service is running via servies.msc or:
	ps>Get-Service docker
	or below command to see status and logon account of the service
	Get-WmiObject Win32_Service | Where-Object {$_.Name -match "docker"} | select Name, DisplayName, StartName, State
7-Installed Docker version can be checked with:
	ps>docker version
8-Great, now that we have Docker installed on our server, it is time to verify few basic things. Issue “Docker Info” command to get information related to docker installation we just finished. 
	ps>Docker Info
9-Updating the DockerMsftProvider
	ps>Update-Module DockerMsftProvider
10-Upgrade Docker Engine - Enterprise can be done anytime by running the following commands on PowerShell:
	Install-Package -Name Docker -ProviderName DockerMsftProvider -Update -Force
	AND
	ps>Restart-Service docker
11-From OS, add docker admin users to "Docker" group as a member, then that users can manage docker engine.

---------------------------------Manually downloading and installing docker (As a replacement of step 2 throught 4 and also for Step 9 failure condition)
!!!
if you encounter with following error: WARNING: Cannot verify the file SHA256. Deleting the file.
you should find and install DockerMsftProvider manually as below, above error generally raised within Upgrade(Step 9), below instruction execute Step 2, Step 3 and Step 4 of the above instruction manually:
!!!
--Find the latest version of all available Docker installers:
ps>Find-PackageProvider DockerMsftProvider
--Find all available versions of Docker installers. Without "-AllVersions", only the latest version is returned.
ps>Find-Package -providerName DockerMsftProvider -AllVersions
--From above command choose your version number of DockerMsftProvider(OneGet) and replace that version number with bellow command version characters(also fot should replace with dash)
ps>Start-BitsTransfer -Source https://dockermsft.blob.core.windows.net/dockercontainer/docker-19-03-2.zip -Destination C:\Users\lenovo\AppData\Local\Temp\1\DockerMsftProvider\Docker-19-03-2.zip
ps>Get-FileHash -Path C:\Users\lenovo\AppData\Local\Temp\1\DockerMsftProvider\Docker-19-03-2.zip -Algorithm SHA256
ps>Install-Package -Name docker -ProviderName DockerMsftProvider -Verbose
ps>Restart-Computer -Force

Source:https://github.com/MicrosoftDocs/Virtualization-Documentation/issues/919

---------------------------------How to enable Remote Connection to this docker host via docker client on another machine:
Solution #1, Connection directly to docker host by listening to TCP port in addition of local named pipe:
	1-On Docker host:
		# Open firewall port 2375
		netsh advfirewall firewall add rule name="docker engine" dir=in action=allow protocol=TCP localport=2375

	2-Configure Docker daemon to listen on both pipe and TCP (replaces docker --register-service invocation above)
		Stop-Service docker
		dockerd --unregister-service
		dockerd -H npipe:// -H 0.0.0.0:2375 --register-service
		Start-Service docker
		
		OR (instead of above section change daemon.json as below)
		
		Got to C:\ProgramData\Docker\config in deamon.json file
		add/modify below string in deamon.json 
			"hosts": ["tcp://0.0.0.0:2375", "npipe://"]
		Now, restart docker.
		
	3-In client machine, Set the env var to a host tcp address ($env:DOCKER_HOST="your-remote-server.org:2375"), also you can set this value in the User Environment GUI to persisting this config:
		This step could be ignored if you use "docker -H" syntax as specified in Step 4
		$env:DOCKER_HOST = "wincoredocker:2375"
	4-Now any docker command will run against the remote api:
		docker ps
		or 
		docker -H tcp://wincoredocker:2375 ps -a
	5-For switch back to local docker, unset the env vars:
		Ignore this step if you ignored step 3, previousely
		Remove-Item env:DOCKER_HOST
	
Solution #2, Connection over OpenSSH (Below steps include how to configure OpenSSH over Windows Server 2019):
	-----Install OpenSSH Server on Windows Server 2019:
	0-Inside Docker host machine, You must install latest Windows Server 2019 Cummulative Update, because OpenSSH is inside the CU's !!!
	1-To get the name of the “package” to install, open a Powershell window as administrator and type:
		Get-WindowsCapability -Online -Name Open*
	2-You’ll see that we have available an Open SSH Server and an Open SSH Client.Let’s start by installing the OpenSSH Server. Type the following in the Powershell window.
		Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
			or in case of windows core, first mount "windows_server_2019_features_on_demand.iso" to server (d:) and then run below command other wise you will get Error code = 0x800f0950:
		Add-WindowsCapability -Online -Name ServerCore.AppCompatibility~~~~0.0.1.0 -Source D: -LimitAccess
		Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 -Source D: -LimitAccess 
	3-Verify the OpenSSH server installation:
		Get-Service sshd
		Get-Service ssh-agent
	4-we need to enable them and set them to start at boot up. For that type:
		Set-Service sshd -StartupType Automatic
		Set-Service ssh-agent -StartupType Automatic
		Start-Service sshd
		Start-Service ssh-agent
	5-Testing the connection to the SSH server. On another Windows 10 machine, or Linux for that matter, open a command prompt (or terminal) and type:
		cmd>ssh administrator@Wincoredocker
	-----Install OpenSSH Client Windows Server 2019:
	1-Back on the Windows Server 2019 computer, at the powershell prompt type:
		Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
	2-Testing the OpenSSH client:
		ssh myServer@[IP address of my target machine]
	-----Run docker command from a client machine on Docker host machine:
	1-If you already added an SSH public key to your remote server, then you can use this ssh credentials for your docker connection, too. You don't need to configure the remote api on the server for this approach.
		Set the env var to a ssh address ($env:DOCKER_HOST="ssh://username@your-remote-server.org"), also you can set this value in the User Environment GUI to persisting this config:
		$env:DOCKER_HOST="ssh://administrator@wincoredocker"
	2-Now any docker command will run against the remote api:
		docker ps
	3-For switch back to local docker, unset the env vars:
		Remove-Item env:DOCKER_HOST

https://www.docker.com/blog/build-your-first-docker-windows-server-container/
https://gist.github.com/kekru/4e6d49b4290a4eebc7b597c07eaf61f2
https://www.experiencingit.net/windows/windows-server/native-ssh-windows-server-2019/

---------------------------------Install SQL Server
1-Let’s search all the Microsoft SQL images available in docker hub by issuing below command:
	ps>docker pull hello-world
	or
	ps>docker search microsoft | select-string sql
	or
	ps>docker image ls
2-Now, let’s pull (think of it like downloading the media) "mssql-server-windows-developer" to your local registry from docker hub by issuing the below command(Depending on your download speeds, it might take a while, also you should use VPN):
	ps>docker pull Microsoft/mssql-server-windows-developer
	or
	ps>docker pull microsoft/mssql-server-windows-developer:2017-latest
	or
	ps>docker pull kkbruce/mssql-server-windows-express:windowsservercore-1809
	or
	ps>docker pull mcr.microsoft.com/mssql/server:2019-CTP2.3-ubuntu
	or
	ps>docker pull mcr.microsoft.com/mssql/server:2019-CTP2.4-ubuntu
	or
	ps>docker pull mcr.microsoft.com/windows/servercore:ltsc2019
	or
	ps>docker pull mcr.microsoft.com/windows/nanoserver:1903
3-Once it’s done pulling the image from hub, issuing the "docker images" command to check if things appear any different. 
	ps>docker images
4-Issue below command to create and run the SQL container. Think of running a container is similar to installing a SQL Instance:
	Syntax:
		docker run --name <friendlyName> -d -p <hostPort>:1433 -e sa_password=<saPassword> -e ACCEPT_EULA=Y microsoft/mssql-server-windows-developer:2017-latest
	Example #1 (Install windows bases image without any shared storage between host and guest):
		docker run --name mssql01 -d -p 14331:1433 -e sa_password=$tr0ngP@ssW0rd -e ACCEPT_EULA=Y microsoft/mssql-server-windows-developer:2017-latest
		or
		docker run --name mssql01 -d -p 14331:1433 -e sa_password=$tr0ngP@ssW0rd -e ACCEPT_EULA=Y kkbruce/mssql-server-windows-express:windowsservercore-1809
	Example #2 (Install linux based image with shared storage between host and guest):
		The below command will create a Volume Storage with the local drive. You can check the same with the (ps>docker volume ls -a) command.
		docker run --name mssql01 -d -p 14331:1433 -e sa_password=$tr0ngP@ssW0rd -e "ACCEPT_EULA=Y" mcr.microsoft.com/mssql/server:2019-CTP2.3-ubuntu -v D:\Docker:/sql
	Example #3 (Install windows based image with shared storage between host and guest):
		ps>docker volume create –name SQLData
		docker run --name mssql01 -d -p 14331:1433 -e sa_password=$tr0ngP@ssW0rd -e ACCEPT_EULA=Y microsoft/mssql-server-windows-developer -v c:\programdata\docker\volumes\sqldata:c:\data
	Example #4 (Install windows based image without shared storage between host and guest, also create container with unqiue random name - good for many installation of same containers):
		docker run -d -p 14331:1433 -e sa_password=$tr0ngP@ssW0rd -e ACCEPT_EULA=Y microsoft/mssql-server-windows-developer
		
		-e: Set the ACCEPT_EULA variable to “Y” to accept end user license agreement and use SA_PASSWORD to Specify your own strong password that meets SQL Server complex password requirements
		-p: Map a TCP port on the host environment (first value) with a TCP port in the container (second value). In this example, SQL Server is listening on TCP 1433 in the container and this is exposed to the port, 14331, on the host
		–name: Specify a custom unique name for the container rather than a randomly generated one (provide a friendly name for the container). If you run more than one container, you cannot reuse this same name.
		–d: Run the container in detached mode (executes the container in background). Since SQL runs as a service, it is recommended to use this option. If not, container will take over your cmd/shell when it starts
5-Let’s verify the status of the newly created Docker windows container to make sure it’s running. For that you can issue either “Docker ps” or “Docker container ls” commands:
	ps>Docker ps -a
6-Now let’s get the IP addresses of these Docker windows SQL containers using the below shown command, I need this information to connect to my SQL container from the host machine or remotely using SSMS or any other client tools. 
	docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" mssql01
7-Connect to your dockerized SQL Server via host by (grab your container ip address from above command):
	Syntax:
	sqlcmd -U sa -P "password" <yourContainerIp>,<SqlPortOnHost>
	Example #1:
	sqlcmd -U sa -P "my$trongP@ssw0rd" 192.168.127.133,14331
7-You can review the sql logs by issuing the command "Docker container logs –name of the container". FYI, below are the logs of my first container mssql01. 
	Docker container logs mssql01
8-Copy file from host to guest (run commands from host machine):
	Syntax:
		docker cp <HostFilePath> <ImageName>:<GuestFilePath>
	Example #1 (Windows):
		docker cp C:\Source\AdventureWorks2017.bak mssql01:C:\Temp\Backup\AdventureWorks2017.bak
	Example #2 (Windows):
		docker cp C:\Source\AdventureWorks2017.bak mssql01:C:\Temp\Backup
	Example #3 (Linux):
		docker cp C:\Source\AdventureWorks2017.bak mssql01:/var/opt/mssql/data/
	Example #4:
		Creating a Shared Volume between container and host:
		From host node run below command (By default, volumes are created at the hidden location in C:\ProgramData\docker\volumes ):
			ps>docker volume create –-name SQLData
	Example #5:
		docker run -it-d -p 14331:1433 -e sa_password=$tr0ngP@ssW0rd -e ACCEPT_EULA=Y --mount source=D:\HostData01,target=C:\GuestData01 microsoft/mssql-server-windows-developer:2017-latest --name mssql01
9-Connect a PowerShell session directly to the container by running this command (Run from host):
	ps>Docker exec -it mssql01 PowerShell
	ps>Dir

---------------------------------Cleaning up Docker container environment:
1-First you stopped your Docker windows containers using command "docker stop containername" and then I was able to remove them without any issues as you can see below. 
	docker stop mssql01
2-Now, let’s cleanup our environment by removing all the Docker SQL containers which we did created so far. To remove/delete a container, issue the command "docker rm containername". 
	docker rm mssql01

-----------------------------
PS>Install-PackageProvider ContainerImage -Force
PS>choco install docker-cli	:install docker client only on windows via chocolatey powershell module(Open ps as admin and run your VPN).

---------------------------------Docker Proxy configuration on Windows:
To set proxy information for docker search and docker pull, create a Windows environment variable with the name HTTP_PROXY or HTTPS_PROXY, and a value of the proxy information. This can be completed with PowerShell using a command similar to this:
	ps>[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://username:password@proxy:port/", [EnvironmentVariableTarget]::Machine)
	ps>[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://username:password@proxy:port/", [EnvironmentVariableTarget]::Machine)
	ps>[Environment]::SetEnvironmentVariable("HTTP_PROXY", $null, [EnvironmentVariableTarget]::Machine)
	ps>[Environment]::SetEnvironmentVariable("HTTPS_PROXY", $null, [EnvironmentVariableTarget]::Machine)
	ps>[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://Proxy.Docker.ir:5555", [EnvironmentVariableTarget]::Machine)
	ps>[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://Proxy.Docker.ir:5555", [EnvironmentVariableTarget]::Machine)
	--Proxy list site: https://free-proxy-list.net/
	Also you can use mirrors like below:
	on c:\ProgramData\Docker\Config create a with name of "daemon.json" and add below text on it:
	{"registry-mirrors": ["http://mirror.hub.yottab.io:35000"]}
	or
	{"registry-mirrors": ["https://registry.docker-cn.com"]}
	or
	{"registry-mirrors": ["http://repo.docker.ir:5000"]}
Once the variable or mirror has been set, restart the Docker service.
	Restart-Service docker
	
Source:
	https://blog.sixeyed.com/getting-started-with-docker-on-windows-server-2019/
	https://www.sqlshack.com/sql-server-with-a-docker-container-on-windows-server-2016/
	https://blog.sqlauthority.com/2019/03/06/sql-server-how-to-get-started-with-docker-containers-with-latest-sql-server/
	https://blog.sqlauthority.com/2019/04/20/sql-server-docker-volume-and-persistent-storage/
	https://nexxtjump.com/2017/12/12/step-by-step-guide-to-run-sql-server-in-a-windows-docker-container/
	https://www.red-gate.com/simple-talk/sysadmin/containerization/provisioning-sql-server-instances-docker/
	https://www.mssqltips.com/sqlservertip/5698/create-sql-server-on-windows-docker-container-using-dockerfile--part-6/
	http://www.notyourdadsit.com/blog/2018/9/25/install-sql-server-2019-via-docker-container-on-windows-10